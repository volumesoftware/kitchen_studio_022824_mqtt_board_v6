/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * @fileoverview Number slider input field.
 * @author kozbial@google.com (Monica Kozbial)
 */
import * as Blockly from 'blockly/core';
/**
 * A config object for defining a field slider.
 */
export type FieldSliderConfig = Blockly.FieldNumberConfig;
/**
 * Options used to define a field slider from JSON.
 */
export interface FieldSliderOptions extends FieldSliderConfig {
    value?: string | number;
}
export type FieldSliderValidator = Blockly.FieldNumberValidator;
/**
 * Slider field.
 */
export declare class FieldSlider extends Blockly.FieldNumber {
    /**
     * Array holding info needed to unbind events.
     * Used for disposing.
     * Ex: [[node, name, func], [node, name, func]].
     */
    private boundEvents;
    /**
     * The HTML range input element.
     */
    private sliderInput;
    /**
     * Class for an number slider field.
     *
     * @param value The initial value of the field. Should
     *    cast to a number. Defaults to 0.
     * @param min Minimum value.
     * @param max Maximum value.
     * @param precision Precision for value.
     * @param validator A function that is called to validate
     *    changes to the field's value. Takes in a number & returns a validated
     *    number, or null to abort the change.
     * @param config A map of options used to configure the field.
     *    See the [field creation documentation]{@link
     * https://developers.google.com/blockly/guides/create-custom-blocks/fields/built-in-fields/number#creation}
     *    for a list of properties this parameter supports.
     */
    constructor(value?: string | number, min?: string | number, max?: string | number, precision?: string | number, validator?: FieldSliderValidator, config?: FieldSliderConfig);
    /**
     * Constructs a FieldSlider from a JSON arg object.
     *
     * @param options A JSON object with options
     *     (value, min, max, precision).
     * @returns The new field instance.
     * @package
     * @nocollapse
     */
    static fromJson(options: FieldSliderOptions): FieldSlider;
    /**
     * Show the inline free-text editor on top of the text along with the slider
     * editor.
     *
     * @param e Optional mouse event that triggered the field to
     *     open, or undefined if triggered programmatically.
     * @param quietInput Quiet input (prevent focusing on the editor).
     */
    protected showEditor_(e?: Event, quietInput?: boolean): void;
    /**
     * Updates the slider when the field rerenders.
     */
    protected render_(): void;
    /**
     * Creates the slider editor and add event listeners.
     *
     * @returns The newly created slider.
     */
    private dropdownCreate_;
    /**
     * Disposes of events belonging to the slider editor.
     */
    private dropdownDispose_;
    /**
     * Sets the text to match the slider's position.
     */
    private onSliderChange_;
    /**
     * Updates the slider when the field rerenders.
     */
    private updateSlider_;
}
//# sourceMappingURL=field_slider.d.ts.map