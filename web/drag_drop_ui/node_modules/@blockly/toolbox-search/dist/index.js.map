{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@blockly/toolbox-search/webpack/universalModuleDefinition","webpack://@blockly/toolbox-search/external umd {\"root\":\"Blockly\",\"commonjs\":\"blockly/core\",\"commonjs2\":\"blockly/core\",\"amd\":\"blockly/core\"}","webpack://@blockly/toolbox-search/webpack/bootstrap","webpack://@blockly/toolbox-search/webpack/runtime/make namespace object","webpack://@blockly/toolbox-search/./src/block_searcher.ts","webpack://@blockly/toolbox-search/./src/toolbox_search.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"blockly/core\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"blockly/core\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"blockly/core\")) : factory(root[\"Blockly\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, (__WEBPACK_EXTERNAL_MODULE__573__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__573__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as Blockly from 'blockly/core';\n\n/**\n * A class that provides methods for indexing and searching blocks.\n */\nexport class BlockSearcher {\n  private blockCreationWorkspace = new Blockly.Workspace();\n  private trigramsToBlocks = new Map<string, Set<string>>();\n\n  /**\n   * Populates the cached map of trigrams to the blocks they correspond to.\n   *\n   * This method must be called before blockTypesMatching(). Behind the\n   * scenes, it creates a workspace, loads the specified block types on it,\n   * indexes their types and human-readable text, and cleans up after\n   * itself.\n   *\n   * @param blockTypes A list of block types to index.\n   */\n  indexBlocks(blockTypes: string[]) {\n    const blockCreationWorkspace = new Blockly.Workspace();\n    blockTypes.forEach((blockType) => {\n      const block = blockCreationWorkspace.newBlock(blockType);\n      this.indexBlockText(blockType.replaceAll('_', ' '), blockType);\n      block.inputList.forEach((input) => {\n        input.fieldRow.forEach((field) => {\n          this.indexDropdownOption(field, blockType);\n          this.indexBlockText(field.getText(), blockType);\n        });\n      });\n    });\n  }\n\n  /**\n   * Check if the field is a dropdown, and index every text in the option\n   *\n   * @param field We need to check the type of field\n   * @param blockType The block type to associate the trigrams with.\n   */\n  private indexDropdownOption(field: Blockly.Field, blockType: string) {\n    if (field instanceof Blockly.FieldDropdown) {\n      field.getOptions(true).forEach((option) => {\n        if (typeof option[0] === 'string') {\n          this.indexBlockText(option[0], blockType);\n        } else if ('alt' in option[0]) {\n          this.indexBlockText(option[0].alt, blockType);\n        }\n      });\n    }\n  }\n\n  /**\n   * Filters the available blocks based on the current query string.\n   *\n   * @param query The text to use to match blocks against.\n   * @returns A list of block types matching the query.\n   */\n  blockTypesMatching(query: string): string[] {\n    return [\n      ...this.generateTrigrams(query)\n        .map((trigram) => {\n          return this.trigramsToBlocks.get(trigram) ?? new Set<string>();\n        })\n        .reduce((matches, current) => {\n          return this.getIntersection(matches, current);\n        })\n        .values(),\n    ];\n  }\n\n  /**\n   * Generates trigrams for the given text and associates them with the given\n   * block type.\n   *\n   * @param text The text to generate trigrams of.\n   * @param blockType The block type to associate the trigrams with.\n   */\n  private indexBlockText(text: string, blockType: string) {\n    this.generateTrigrams(text).forEach((trigram) => {\n      const blockSet = this.trigramsToBlocks.get(trigram) ?? new Set<string>();\n      blockSet.add(blockType);\n      this.trigramsToBlocks.set(trigram, blockSet);\n    });\n  }\n\n  /**\n   * Generates a list of trigrams for a given string.\n   *\n   * @param input The string to generate trigrams of.\n   * @returns A list of trigrams of the given string.\n   */\n  private generateTrigrams(input: string): string[] {\n    const normalizedInput = input.toLowerCase();\n    if (!normalizedInput) return [];\n    if (normalizedInput.length <= 3) return [normalizedInput];\n\n    const trigrams: string[] = [];\n    for (let start = 0; start < normalizedInput.length - 3; start++) {\n      trigrams.push(normalizedInput.substring(start, start + 3));\n    }\n\n    return trigrams;\n  }\n\n  /**\n   * Returns the intersection of two sets.\n   *\n   * @param a The first set.\n   * @param b The second set.\n   * @returns The intersection of the two sets.\n   */\n  private getIntersection(a: Set<string>, b: Set<string>): Set<string> {\n    return new Set([...a].filter((value) => b.has(value)));\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * A toolbox category that provides a search field and displays matching blocks\n * in its flyout.\n */\nimport * as Blockly from 'blockly/core';\nimport {BlockSearcher} from './block_searcher';\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\n/**\n * A toolbox category that provides a search field and displays matching blocks\n * in its flyout.\n */\nexport class ToolboxSearchCategory extends Blockly.ToolboxCategory {\n  private static readonly START_SEARCH_SHORTCUT = 'startSearch';\n  static readonly SEARCH_CATEGORY_KIND = 'search';\n  private searchField?: HTMLInputElement;\n  private blockSearcher = new BlockSearcher();\n\n  /**\n   * Initializes a ToolboxSearchCategory.\n   *\n   * @param categoryDef The information needed to create a category in the\n   *     toolbox.\n   * @param parentToolbox The parent toolbox for the category.\n   * @param opt_parent The parent category or null if the category does not have\n   *     a parent.\n   */\n  constructor(\n    categoryDef: Blockly.utils.toolbox.CategoryInfo,\n    parentToolbox: Blockly.IToolbox,\n    opt_parent?: Blockly.ICollapsibleToolboxItem,\n  ) {\n    super(categoryDef, parentToolbox, opt_parent);\n    this.initBlockSearcher();\n    this.registerShortcut();\n  }\n\n  /**\n   * Initializes the search field toolbox category.\n   *\n   * @returns The <div> that will be displayed in the toolbox.\n   */\n  protected override createDom_(): HTMLDivElement {\n    const dom = super.createDom_();\n    this.searchField = document.createElement('input');\n    this.searchField.type = 'search';\n    this.searchField.placeholder = 'Search';\n    this.workspace_.RTL\n      ? (this.searchField.style.marginRight = '8px')\n      : (this.searchField.style.marginLeft = '8px');\n    this.searchField.addEventListener('keyup', (event) => {\n      if (event.key === 'Escape') {\n        this.parentToolbox_.clearSelection();\n        return true;\n      }\n\n      this.matchBlocks();\n    });\n    this.rowContents_?.replaceChildren(this.searchField);\n    return dom;\n  }\n\n  /**\n   * Returns the numerical position of this category in its parent toolbox.\n   *\n   * @returns The zero-based index of this category in its parent toolbox, or -1\n   *    if it cannot be determined, e.g. if this is a nested category.\n   */\n  private getPosition() {\n    const categories = this.workspace_.options.languageTree?.contents || [];\n    for (let i = 0; i < categories.length; i++) {\n      if (categories[i].kind === ToolboxSearchCategory.SEARCH_CATEGORY_KIND) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /**\n   * Registers a shortcut for displaying the toolbox search category.\n   */\n  private registerShortcut() {\n    const shortcut = Blockly.ShortcutRegistry.registry.createSerializedKey(\n      Blockly.utils.KeyCodes.B,\n      [Blockly.utils.KeyCodes.CTRL],\n    );\n    Blockly.ShortcutRegistry.registry.register({\n      name: ToolboxSearchCategory.START_SEARCH_SHORTCUT,\n      callback: () => {\n        const position = this.getPosition();\n        if (position < 0) return false;\n        this.parentToolbox_.selectItemByPosition(position);\n        return true;\n      },\n      keyCodes: [shortcut],\n    });\n  }\n\n  /**\n   * Returns a list of block types that are present in the toolbox definition.\n   *\n   * @param schema A toolbox item definition.\n   * @param allBlocks The set of all available blocks that have been encountered\n   *     so far.\n   */\n  private getAvailableBlocks(\n    schema: Blockly.utils.toolbox.ToolboxItemInfo,\n    allBlocks: Set<string>,\n  ) {\n    if ('contents' in schema) {\n      schema.contents.forEach((contents) => {\n        this.getAvailableBlocks(contents, allBlocks);\n      });\n    } else if (schema.kind.toLowerCase() === 'block') {\n      if ('type' in schema && schema.type) {\n        allBlocks.add(schema.type);\n      }\n    }\n  }\n\n  /**\n   * Builds the BlockSearcher index based on the available blocks.\n   */\n  private initBlockSearcher() {\n    const availableBlocks = new Set<string>();\n    this.workspace_.options.languageTree?.contents?.forEach((item) =>\n      this.getAvailableBlocks(item, availableBlocks),\n    );\n    this.blockSearcher.indexBlocks([...availableBlocks]);\n  }\n\n  /**\n   * Handles a click on this toolbox category.\n   *\n   * @param e The click event.\n   */\n  override onClick(e: Event) {\n    super.onClick(e);\n    e.preventDefault();\n    e.stopPropagation();\n    this.setSelected(this.parentToolbox_.getSelectedItem() === this);\n  }\n\n  /**\n   * Handles changes in the selection state of this category.\n   *\n   * @param isSelected Whether or not the category is now selected.\n   */\n  override setSelected(isSelected: boolean) {\n    super.setSelected(isSelected);\n    if (!this.searchField) return;\n    if (isSelected) {\n      this.searchField.focus();\n      this.matchBlocks();\n    } else {\n      this.searchField.value = '';\n      this.searchField.blur();\n    }\n  }\n\n  /**\n   * Filters the available blocks based on the current query string.\n   */\n  private matchBlocks() {\n    const query = this.searchField?.value || '';\n\n    this.flyoutItems_ = query\n      ? this.blockSearcher.blockTypesMatching(query).map((blockType) => {\n          return {\n            kind: 'block',\n            type: blockType,\n          };\n        })\n      : [];\n\n    if (!this.flyoutItems_.length) {\n      this.flyoutItems_.push({\n        kind: 'label',\n        text:\n          query.length < 3\n            ? 'Type to search for blocks'\n            : 'No matching blocks found',\n      });\n    }\n    this.parentToolbox_.refreshSelection();\n  }\n\n  /**\n   * Disposes of this category.\n   */\n  override dispose() {\n    super.dispose();\n    Blockly.ShortcutRegistry.registry.unregister(\n      ToolboxSearchCategory.START_SEARCH_SHORTCUT,\n    );\n  }\n}\n\nBlockly.registry.register(\n  Blockly.registry.Type.TOOLBOX_ITEM,\n  ToolboxSearchCategory.SEARCH_CATEGORY_KIND,\n  ToolboxSearchCategory,\n);\n"],"names":["root","factory","exports","module","require","define","amd","a","i","this","__WEBPACK_EXTERNAL_MODULE__573__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","r","Symbol","toStringTag","Object","defineProperty","value","BlockSearcher","blockCreationWorkspace","trigramsToBlocks","Map","indexBlocks","blockTypes","forEach","blockType","block","newBlock","indexBlockText","replaceAll","inputList","input","fieldRow","field","indexDropdownOption","getText","getOptions","option","alt","blockTypesMatching","query","generateTrigrams","map","trigram","get","Set","reduce","matches","current","getIntersection","values","text","blockSet","add","set","normalizedInput","toLowerCase","length","trigrams","start","push","substring","b","filter","has","ToolboxSearchCategory","constructor","categoryDef","parentToolbox","opt_parent","super","blockSearcher","initBlockSearcher","registerShortcut","createDom_","dom","searchField","document","createElement","type","placeholder","workspace_","RTL","style","marginRight","marginLeft","addEventListener","event","key","parentToolbox_","clearSelection","matchBlocks","rowContents_","replaceChildren","getPosition","categories","options","languageTree","contents","kind","SEARCH_CATEGORY_KIND","shortcut","B","name","START_SEARCH_SHORTCUT","callback","position","selectItemByPosition","keyCodes","getAvailableBlocks","schema","allBlocks","availableBlocks","item","onClick","e","preventDefault","stopPropagation","setSelected","getSelectedItem","isSelected","focus","blur","flyoutItems_","refreshSelection","dispose"],"sourceRoot":""}